; ModuleID = '/Users/justin/swift-cc/swift-cc-tools/tests/obj/test2.ir'
target datalayout = "e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32"
target triple = "armv7-apple-ios7.0"

%swift.full_type = type { i8**, %swift.type }
%swift.type = type { i32 }
%objc_class = type { %objc_class*, %objc_class*, %swift.opaque*, %swift.opaque*, i32 }
%swift.opaque = type opaque
%C4Test5Test2 = type <{ %swift.refcounted }>
%swift.refcounted = type { %swift.type*, i32, i32 }
%swift.full_heapmetadata = type { void (%swift.refcounted*)*, i8**, %swift.type }
%SS = type <{ %VSs11_StringCore }>
%VSs11_StringCore = type <{ %VSs14COpaquePointer, %Su, %Sq }>
%VSs14COpaquePointer = type <{ i8* }>
%Su = type <{ i32 }>
%Sq = type <{ [4 x i8] }>

@0 = private unnamed_addr constant [6 x i8] c"test2\00"
@_TMdSS = external global %swift.full_type
@_TWVBo = external global i8*
@_TMmC4Test5Test2 = global %objc_class { %objc_class* @"OBJC_METACLASS_$_SwiftObject", %objc_class* @"OBJC_METACLASS_$_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* @_objc_empty_vtable, i32 ptrtoint ({ i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_METACLASS_DATA__TtC4Test5Test2 to i32) }
@"OBJC_CLASS_$_SwiftObject" = external global %objc_class
@_objc_empty_cache = external global %swift.opaque
@_objc_empty_vtable = external global %swift.opaque
@"OBJC_METACLASS_$_SwiftObject" = external global %objc_class
@1 = private unnamed_addr constant [16 x i8] c"_TtC4Test5Test2\00"
@_METACLASS_DATA__TtC4Test5Test2 = private constant { i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* } { i32 129, i32 20, i32 20, i8* null, i8* getelementptr inbounds ([16 x i8]* @1, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 4
@_DATA__TtC4Test5Test2 = private constant { i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* } { i32 128, i32 12, i32 12, i8* null, i8* getelementptr inbounds ([16 x i8]* @1, i32 0, i32 0), i8* null, i8* null, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 4
@2 = private unnamed_addr constant [13 x i8] c"C4Test5Test2\00"
@3 = private unnamed_addr constant [1 x i8] zeroinitializer
@field_type_vector_Test2 = internal global %swift.type** null
@_TMnC4Test5Test2 = constant { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 } { i32 0, i8* getelementptr inbounds ([13 x i8]* @2, i32 0, i32 0), i32 0, i32 14, i8* getelementptr inbounds ([1 x i8]* @3, i32 0, i32 0), %swift.type** (%swift.type*)* @get_field_types_Test2, i32 0, i32 0, i32 0 }
@_TWoFC4Test5Test24testfS0_FT_T_ = constant i32 56, align 4
@_TWoFC4Test5Test2CfMS0_FT_S0_ = constant i32 60, align 4
@_TMLC4Test5Test2 = global %swift.type* null, align 4
@_TMdC4Test5Test2 = global { void (%C4Test5Test2*)*, i8**, i32, %objc_class*, %swift.opaque*, %swift.opaque*, i32, i32, i32, i32, i16, i16, i32, i32, { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 }*, void (%C4Test5Test2*)*, %C4Test5Test2* (%C4Test5Test2*)* } { void (%C4Test5Test2*)* @_TFC4Test5Test2D, i8** @_TWVBo, i32 ptrtoint (%objc_class* @_TMmC4Test5Test2 to i32), %objc_class* @"OBJC_CLASS_$_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* @_objc_empty_vtable, i32 add (i32 ptrtoint ({ i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC4Test5Test2 to i32), i32 1), i32 3, i32 0, i32 12, i16 3, i16 0, i32 64, i32 8, { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 }* @_TMnC4Test5Test2, void (%C4Test5Test2*)* @_TFC4Test5Test24testfS0_FT_T_, %C4Test5Test2* (%C4Test5Test2*)* @_TFC4Test5Test2cfMS0_FT_S0_ }
@objc_classes = internal global [1 x i8*] [i8* bitcast (%swift.type* getelementptr inbounds (%swift.full_heapmetadata* bitcast ({ void (%C4Test5Test2*)*, i8**, i32, %objc_class*, %swift.opaque*, %swift.opaque*, i32, i32, i32, i32, i16, i16, i32, i32, { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 }*, void (%C4Test5Test2*)*, %C4Test5Test2* (%C4Test5Test2*)* }* @_TMdC4Test5Test2 to %swift.full_heapmetadata*), i32 0, i32 2) to i8*)], section "__DATA, __objc_classlist, regular, no_dead_strip", align 4
@objc_non_lazy_classes = internal global [1 x i8*] [i8* bitcast (%swift.type* getelementptr inbounds (%swift.full_heapmetadata* bitcast ({ void (%C4Test5Test2*)*, i8**, i32, %objc_class*, %swift.opaque*, %swift.opaque*, i32, i32, i32, i32, i16, i16, i32, i32, { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 }*, void (%C4Test5Test2*)*, %C4Test5Test2* (%C4Test5Test2*)* }* @_TMdC4Test5Test2 to %swift.full_heapmetadata*), i32 0, i32 2) to i8*)], section "__DATA, __objc_nlclslist, regular, no_dead_strip", align 4
@llvm.used = appending global [2 x i8*] [i8* bitcast ([1 x i8*]* @objc_classes to i8*), i8* bitcast ([1 x i8*]* @objc_non_lazy_classes to i8*)], section "llvm.metadata", align 4

define internal void @top_level_code() {
entry:
  ret void
}

define void @_TFC4Test5Test24testfS0_FT_T_(%C4Test5Test2*) {
entry:
  %1 = alloca %SS, align 4
  %2 = call { i8*, i32, i32 } @_TFSS32_convertFromBuiltinStringLiteralfMSSFTBp8byteSizeBw7isASCIIBi1__SS(i8* getelementptr inbounds ([6 x i8]* @0, i32 0, i32 0), i32 5, i1 true)
  %3 = extractvalue { i8*, i32, i32 } %2, 0
  %4 = extractvalue { i8*, i32, i32 } %2, 1
  %5 = extractvalue { i8*, i32, i32 } %2, 2
  %._core = getelementptr inbounds %SS* %1, i32 0, i32 0
  %._core._baseAddress = getelementptr inbounds %VSs11_StringCore* %._core, i32 0, i32 0
  %._core._baseAddress.value = getelementptr inbounds %VSs14COpaquePointer* %._core._baseAddress, i32 0, i32 0
  store i8* %3, i8** %._core._baseAddress.value, align 4
  %._core._countAndFlags = getelementptr inbounds %VSs11_StringCore* %._core, i32 0, i32 1
  %._core._countAndFlags.value = getelementptr inbounds %Su* %._core._countAndFlags, i32 0, i32 0
  store i32 %4, i32* %._core._countAndFlags.value, align 4
  %._core._owner = getelementptr inbounds %VSs11_StringCore* %._core, i32 0, i32 2
  %6 = bitcast %Sq* %._core._owner to i32*
  store i32 %5, i32* %6, align 4
  %7 = bitcast %SS* %1 to %swift.opaque*
  call void @_TFSs5printU__FQ_T_(%swift.opaque* %7, %swift.type* getelementptr inbounds (%swift.full_type* @_TMdSS, i32 0, i32 1))
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%C4Test5Test2*)*)(%C4Test5Test2* %0) #1
  ret void
}

declare void @_TFSs5printU__FQ_T_(%swift.opaque* noalias, %swift.type*)

declare { i8*, i32, i32 } @_TFSS32_convertFromBuiltinStringLiteralfMSSFTBp8byteSizeBw7isASCIIBi1__SS(i8*, i32, i1)

declare void @swift_release(%swift.refcounted*)

define %swift.refcounted* @_TFC4Test5Test2d(%C4Test5Test2*) {
entry:
  %1 = bitcast %C4Test5Test2* %0 to %swift.refcounted*
  ret %swift.refcounted* %1
}

define void @_TFC4Test5Test2D(%C4Test5Test2*) {
entry:
  %1 = call %swift.refcounted* @_TFC4Test5Test2d(%C4Test5Test2* %0)
  %2 = bitcast %swift.refcounted* %1 to %C4Test5Test2*
  %3 = bitcast %C4Test5Test2* %2 to %swift.refcounted*
  call void @swift_deallocObject(%swift.refcounted* %3, i32 12, i32 3)
  ret void
}

declare void @swift_deallocObject(%swift.refcounted*, i32, i32)

define %C4Test5Test2* @_TFC4Test5Test2cfMS0_FT_S0_(%C4Test5Test2*) {
entry:
  ret %C4Test5Test2* %0
}

define %C4Test5Test2* @_TFC4Test5Test2CfMS0_FT_S0_(%swift.type*) {
entry:
  %1 = call %swift.type* @_TMaC4Test5Test2() #0
  %2 = call noalias %swift.refcounted* @swift_allocObject(%swift.type* %1, i32 12, i32 3) #1
  %3 = bitcast %swift.refcounted* %2 to %C4Test5Test2*
  %4 = call %C4Test5Test2* @_TFC4Test5Test2cfMS0_FT_S0_(%C4Test5Test2* %3)
  ret %C4Test5Test2* %4
}

; Function Attrs: nounwind readnone
define %swift.type* @_TMaC4Test5Test2() #0 {
entry:
  %0 = load %swift.type** @_TMLC4Test5Test2, align 4
  %1 = icmp eq %swift.type* %0, null
  br i1 %1, label %cacheIsNull, label %cont

cacheIsNull:                                      ; preds = %entry
  %2 = call %objc_class* @swift_getInitializedObjCClass(%objc_class* bitcast (%swift.type* getelementptr inbounds (%swift.full_heapmetadata* bitcast ({ void (%C4Test5Test2*)*, i8**, i32, %objc_class*, %swift.opaque*, %swift.opaque*, i32, i32, i32, i32, i16, i16, i32, i32, { i32, i8*, i32, i32, i8*, %swift.type** (%swift.type*)*, i32, i32, i32 }*, void (%C4Test5Test2*)*, %C4Test5Test2* (%C4Test5Test2*)* }* @_TMdC4Test5Test2 to %swift.full_heapmetadata*), i32 0, i32 2) to %objc_class*))
  %3 = bitcast %objc_class* %2 to %swift.type*
  store atomic %swift.type* %3, %swift.type** @_TMLC4Test5Test2 release, align 4
  br label %cont

cont:                                             ; preds = %cacheIsNull, %entry
  %4 = phi %swift.type* [ %0, %entry ], [ %3, %cacheIsNull ]
  ret %swift.type* %4
}

declare %swift.refcounted* @swift_allocObject(%swift.type*, i32, i32)

define void @_TF4Test10TestGlobalFT_T_() {
entry:
  %0 = alloca %C4Test5Test2*, align 4
  %1 = call %swift.type* @_TMaC4Test5Test2() #0
  %2 = call %C4Test5Test2* @_TFC4Test5Test2CfMS0_FT_S0_(%swift.type* %1)
  store %C4Test5Test2* %2, %C4Test5Test2** %0, align 4
  %3 = bitcast %C4Test5Test2* %2 to %swift.refcounted*
  call void @swift_retain_noresult(%swift.refcounted* %3) #1
  %4 = getelementptr inbounds %C4Test5Test2* %2, i32 0, i32 0, i32 0
  %.metadata = load %swift.type** %4, align 4
  %5 = bitcast %swift.type* %.metadata to void (%C4Test5Test2*)**
  %6 = getelementptr inbounds void (%C4Test5Test2*)** %5, i32 12
  %7 = load void (%C4Test5Test2*)** %6, align 4
  %8 = bitcast void (%C4Test5Test2*)* %7 to i8*
  %9 = bitcast i8* %8 to void (%C4Test5Test2*)*
  call void %9(%C4Test5Test2* %2)
  call void bitcast (void (%swift.refcounted*)* @swift_release to void (%C4Test5Test2*)*)(%C4Test5Test2* %2) #1
  ret void
}

declare void @swift_retain_noresult(%swift.refcounted*)

define internal %swift.type** @get_field_types_Test2(%swift.type*) {
entry:
  %1 = load %swift.type*** @field_type_vector_Test2, align 4
  %2 = icmp eq %swift.type** %1, null
  br i1 %2, label %build_field_types, label %done

build_field_types:                                ; preds = %entry
  %3 = call noalias i8* @swift_slowAlloc(i32 0, i32 3) #1
  %4 = bitcast i8* %3 to %swift.type**
  %5 = ptrtoint %swift.type** %4 to i32
  %6 = cmpxchg i32* bitcast (%swift.type*** @field_type_vector_Test2 to i32*), i32 0, i32 %5 seq_cst
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %done, label %race_lost

race_lost:                                        ; preds = %build_field_types
  call void @swift_slowDealloc(i8* %3, i32 0, i32 3) #1
  %8 = inttoptr i32 %6 to %swift.type**
  br label %done

done:                                             ; preds = %race_lost, %build_field_types, %entry
  %9 = phi %swift.type** [ %1, %entry ], [ %4, %build_field_types ], [ %8, %race_lost ]
  ret %swift.type** %9
}

declare i8* @swift_slowAlloc(i32, i32)

declare void @swift_slowDealloc(i8*, i32, i32)

declare %objc_class* @swift_getInitializedObjCClass(%objc_class*)

define i32 @main(i32 %argc, i8** %argv) {
entry:
  %0 = call i8* @_TFSsa6C_ARGCVSs5Int32()
  %1 = bitcast i8* %0 to i32*
  store i32 %argc, i32* %1
  %2 = call i8* @_TFSsa6C_ARGVGVSs20UnsafeMutablePointerGS_VSs4Int8__()
  %3 = bitcast i8* %2 to i8***
  store i8** %argv, i8*** %3
  call void @top_level_code()
  ret i32 0
}

declare i8* @_TFSsa6C_ARGCVSs5Int32()

declare i8* @_TFSsa6C_ARGVGVSs20UnsafeMutablePointerGS_VSs4Int8__()

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !5, !6, !7, !8, !9}

!0 = metadata !{i32 2, metadata !"Dwarf Version", i32 3}
!1 = metadata !{i32 1, metadata !"Debug Info Version", i32 1}
!2 = metadata !{i32 6, metadata !"Linker Options", metadata !3}
!3 = metadata !{metadata !4}
!4 = metadata !{metadata !"-lswiftCore"}
!5 = metadata !{i32 1, metadata !"Objective-C Version", i32 2}
!6 = metadata !{i32 1, metadata !"Swift Version", i32 2}
!7 = metadata !{i32 1, metadata !"Objective-C Image Info Version", i32 0}
!8 = metadata !{i32 1, metadata !"Objective-C Image Info Section", metadata !"__DATA, __objc_imageinfo, regular, no_dead_strip"}
!9 = metadata !{i32 4, metadata !"Objective-C Garbage Collection", i32 512}
